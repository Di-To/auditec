// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Tree {
  id           Int       @id @default(autoincrement())
  details      Details[]
  region       String
  municipality String
  park         String
  latitude     Decimal
  longitude    Decimal
}

model Details {
  id      Int      @id @default(autoincrement())
  tree    Tree     @relation(fields: [treeId], references: [id])
  treeId  Int
  picture String
  grade   Int
  time    DateTime
}

model Country {
  id         Int      @id @default(autoincrement())
  coutryName String
  region     Region[]
}

model Region {
  id           Int            @id @default(autoincrement())
  country      Country        @relation(fields: [countryId], references: [id])
  countryId    Int
  regionName   String
  municipality Municipality[]
}

model Municipality {
  id               Int    @id @default(autoincrement())
  region           Region @relation(fields: [regionId], references: [id])
  regionId         Int
  municipalityName String
  zone             Zone[]
}

model Zone {
  id             Int              @id @default(autoincrement())
  municipality   Municipality     @relation(fields: [municipalityId], references: [id])
  zoneName       String
  municipalityId Int
  greenArea      GreenArea[]
  zoneEvlaution  ZoneEvaluation[]
}

model ZoneEvaluation {
  id               Int         @id @default(autoincrement())
  zoneName         String
  zone             Zone        @relation(fields: [zoneEvaluationId], references: [id])
  zoneEvaluationId Int
  greenArea        GreenArea[]
}

model GreenArea {
  id               Int            @id @default(autoincrement())
  zone             Zone           @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  zoneEvaluation   ZoneEvaluation @relation(fields: [zoneEvaluationId], references: [id], onDelete: Cascade)
  zoneId           Int
  zoneEvaluationId Int
  parkName         String
  location         String
  surface          Decimal
  latitude         Decimal
  longitude        Decimal
  evaluation       Evaluation[]
}

model Evaluation {
  id             Int              @id @default(autoincrement())
  greenArea      GreenArea        @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  evaluationId   Int
  date           DateTime
  observation    String
  grass          Grass[]
  trees          Trees[]
  infrastructure Infrastructure[]
  floorCovers    FloorCovers[]
  sideWalks      SideWalks[]
  cleaning       Cleaning[]
  seasonFlowers  SeasonFlowers[]
}

model Grass {
  id         Int         @id @default(autoincrement())
  evaluation Evaluation  @relation(fields: [grassId], references: [id], onDelete: Cascade)
  grassId    Int
  grassEval  GrassEval[]
}

model GrassEval {
  id          Int      @id @default(autoincrement())
  grass       Grass    @relation(fields: [grassEvalId], references: [id])
  grassEvalId Int
  grade       Int
  date        DateTime
  evalType    String
  observation String
  latitude    Decimal
  longitude   Decimal
}

model Trees {
  id         Int         @id @default(autoincrement())
  evaluation Evaluation  @relation(fields: [treesId], references: [id], onDelete: Cascade)
  treesId    Int
  treesEval  TreesEval[]
}

model TreesEval {
  id          Int      @id @default(autoincrement())
  trees       Trees    @relation(fields: [treeEval], references: [id])
  treeEval    Int
  grade       Int
  date        DateTime
  evalType    String
  observation String
  latitude    Decimal
  longitude   Decimal
}

model Infrastructure {
  id                 Int                  @id @default(autoincrement())
  evaluation         Evaluation           @relation(fields: [greenAreaId], references: [id], onDelete: Cascade)
  greenAreaId        Int
  infrastructureEval InfrastructureEval[]
}

model InfrastructureEval {
  id                   Int            @id @default(autoincrement())
  infrastructe         Infrastructure @relation(fields: [infrastructureEvalId], references: [id])
  infrastructureEvalId Int
  grade                Int
  date                 DateTime
  evalType             String
  observation          String
  latitude             Decimal
  longitude            Decimal
}

model FloorCovers {
  id              Int               @id @default(autoincrement())
  evaluation      Evaluation        @relation(fields: [greenAreaId], references: [id], onDelete: Cascade)
  greenAreaId     Int
  floorCoversEval FloorCoversEval[]
}

model FloorCoversEval {
  id                Int         @id @default(autoincrement())
  floorCovers       FloorCovers @relation(fields: [floorCoversEvalId], references: [id])
  floorCoversEvalId Int
  grade             Int
  date              DateTime
  evalType          String
  observation       String
  latitude          Decimal
  longitude         Decimal
}

model SideWalks {
  id            Int             @id @default(autoincrement())
  evaluation    Evaluation      @relation(fields: [greenAreaId], references: [id], onDelete: Cascade)
  greenAreaId   Int
  sideWalksEval SideWalksEval[]
}

model SideWalksEval {
  id          Int       @id @default(autoincrement())
  sideWalks   SideWalks @relation(fields: [sideWalksId], references: [id])
  sideWalksId Int
  grade       Int
  date        DateTime
  evalType    String
  observation String
  latitude    Decimal
  longitude   Decimal
}

model Cleaning {
  id           Int            @id @default(autoincrement())
  evaluation   Evaluation     @relation(fields: [greenAreaId], references: [id], onDelete: Cascade)
  greenAreaId  Int
  cleaningEval CleaningEval[]
}

model CleaningEval {
  id             Int      @id @default(autoincrement())
  cleaning       Cleaning @relation(fields: [cleaningEvalId], references: [id])
  cleaningEvalId Int
  grade          Int
  date           DateTime
  evalType       String
  observation    String
  latitude       Decimal
  longitude      Decimal
}

model SeasonFlowers {
  id                  Int                 @id @default(autoincrement())
  evaluation          Evaluation          @relation(fields: [greenAreaId], references: [id], onDelete: Cascade)
  greenAreaId         Int
  seasonalFlowersEval SeasonFlowersEval[]
}

model SeasonFlowersEval {
  id                    Int           @id @default(autoincrement())
  seasonalFlowers       SeasonFlowers @relation(fields: [seasonalFlowersEvalId], references: [id])
  seasonalFlowersEvalId Int
  grade                 Int
  date                  DateTime
  evalType              String
  observation           String
  latitude              Decimal
  longitude             Decimal
}
